{"ast":null,"code":"var _jsxFileName = \"/Users/alexwilson/Documents/CSCI426/Expense_Tracker_Project/Expense-Tracker/src/components/Login/SignUp.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useReducer, useContext, useRef } from 'react';\nimport Card from '../UI/Card/Card';\nimport Input from '../UI/Input/Input';\nimport classes from './Login.module.css';\nimport Button from '../UI/Button/Button';\nimport AuthContext from '../../store/auth-context';\n/* email Reducer */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst emailReducer = (state, action) => {\n  /* when the user is typing in their email */\n  if (action.type === 'USER_INPUT') {\n    /* return if it a valid email  */\n    return {\n      value: action.val,\n      isValid: action.val.includes('@')\n    };\n  }\n\n  if (action.type === 'INPUT_BLUR') {\n    return {\n      value: state.value,\n      isValid: state.value.includes('@')\n    };\n  }\n\n  return {\n    value: '',\n    isValid: false\n  };\n};\n/* password Reducer */\n\n\nconst passwordReducer = (state, action) => {\n  if (action.type === 'USER_PASSWORD') {\n    return {\n      value: action.val,\n      isValid: action.val.trim().length > 6\n    };\n  }\n\n  if (action.type === 'INPUT_BLUR') {\n    return {\n      value: state.value,\n      isValid: state.value.trim().length > 6\n    };\n  }\n\n  return {\n    value: '',\n    isValid: false\n  };\n};\n\nconst SignUp = () => {\n  _s();\n\n  const [formIsValid, setFormIsValid] = useState(false);\n  /* email reducer */\n\n  const [emailState, dispatchEmail] = useReducer(emailReducer, {\n    value: '',\n    isValid: null\n  });\n  /* password reducer */\n\n  const [passwordState, dispatchPassword] = useReducer(passwordReducer, {\n    value: '',\n    isValid: null\n  });\n  useEffect(() => {\n    console.log(\"EFFECT RUNNING\");\n    return () => {\n      console.log(\"EFFECT RUNNING\");\n    };\n  }, []);\n  /*  useEffect will only run if either\n      enteredEmail, or enteredPassword changed    \n  */\n\n  const {\n    isValid: emailIsValid\n  } = emailState;\n  const {\n    isValid: passwordIsValid\n  } = passwordState;\n  const context = useContext(AuthContext);\n  const emailInputRef = useRef();\n  const passwordInputRef = useRef();\n  useEffect(() => {\n    /* Every 2 seconds, check for valid email and password */\n    const identifier = setTimeout(() => {\n      console.log(\"Checking for validation\");\n      setFormIsValid(emailIsValid && passwordIsValid);\n    }, 2000);\n    /* clear current timer, before starting a new one */\n\n    return () => {\n      console.log(\"CLEAN UP\");\n      clearTimeout(identifier);\n    };\n  }, [emailIsValid, passwordIsValid]);\n  /* function to handle when the user types in their email */\n\n  const emailChangeHandler = event => {\n    /* notify the email Reducer */\n    dispatchEmail({\n      // pass the type and the email value\n      type: 'USER_INPUT',\n      val: event.target.value\n    });\n  };\n  /* function to handle when the user types in their password */\n\n\n  const passwordChangeHandler = event => {\n    /* notify the password Reducer */\n    dispatchPassword({\n      // pass the type and the password value\n      type: 'USER_PASSWORD',\n      val: event.target.value\n    });\n  };\n  /* function to validate user email */\n\n\n  const validateEmailHandler = () => {\n    dispatchEmail({\n      type: 'INPUT_BLUR'\n    });\n  };\n  /* function to validate user password */\n\n\n  const validatePasswordHandler = () => {\n    dispatchPassword({\n      type: 'INPUT_BLUR'\n    });\n  };\n\n  const submitHandler = event => {\n    event.preventDefault(); // prevent default HTTP request\n\n    /* if username and password valid */\n\n    if (formIsValid) {\n      /* create user object to send to database */\n      const user = {\n        email: emailState.value,\n        password: passwordState.value\n      };\n      addUserToDatabase(user);\n    } else if (!emailIsValid) {\n      emailInputRef.current.focus();\n    } else {\n      passwordInputRef.current.focus();\n    }\n  };\n  /* function to send username/password to database */\n\n\n  async function addUserToDatabase(user) {\n    /* send HTTPS POST request */\n    const response = await fetch('https://expense-tracker-c57db-default-rtdb.firebaseio.com/users.json', {\n      method: 'POST',\n      body: JSON.stringify(user),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await response.json();\n    console.log(data);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.login,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        ref: emailInputRef,\n        isValid: emailIsValid,\n        id: \"email\",\n        label: \"E-Mail\",\n        type: \"email\",\n        value: emailState.value,\n        onChange: emailChangeHandler,\n        onBlur: validateEmailHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        ref: passwordInputRef,\n        isValid: passwordIsValid,\n        id: \"password\",\n        label: \"Password\",\n        type: \"password\",\n        value: passwordState.value,\n        onChange: passwordChangeHandler,\n        onBlur: validatePasswordHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          className: classes.btn,\n          children: \"Sign Up\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 7\n  }, this);\n};\n\n_s(SignUp, \"6YL6Pftn9nnYOZGlj89HolUfKEU=\");\n\n_c = SignUp;\nexport default SignUp;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignUp\");","map":{"version":3,"sources":["/Users/alexwilson/Documents/CSCI426/Expense_Tracker_Project/Expense-Tracker/src/components/Login/SignUp.js"],"names":["React","useState","useEffect","useReducer","useContext","useRef","Card","Input","classes","Button","AuthContext","emailReducer","state","action","type","value","val","isValid","includes","passwordReducer","trim","length","SignUp","formIsValid","setFormIsValid","emailState","dispatchEmail","passwordState","dispatchPassword","console","log","emailIsValid","passwordIsValid","context","emailInputRef","passwordInputRef","identifier","setTimeout","clearTimeout","emailChangeHandler","event","target","passwordChangeHandler","validateEmailHandler","validatePasswordHandler","submitHandler","preventDefault","user","email","password","addUserToDatabase","current","focus","response","fetch","method","body","JSON","stringify","headers","data","json","login","actions","btn"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useReducer, useContext, useRef } from 'react';\n\nimport Card from '../UI/Card/Card';\nimport Input from '../UI/Input/Input';\nimport classes from './Login.module.css';\nimport Button from '../UI/Button/Button';\nimport AuthContext from '../../store/auth-context';\n\n/* email Reducer */\nconst emailReducer = (state, action) => {\n\n  /* when the user is typing in their email */\n  if(action.type === 'USER_INPUT')\n  {\n    /* return if it a valid email  */\n    return { value: action.val, isValid: action.val.includes('@')}; \n  }\n\n  if(action.type === 'INPUT_BLUR')\n  {\n    return {value: state.value, isValid: state.value.includes('@')};\n  }\n\n  return {value: '', isValid: false};\n};\n\n/* password Reducer */\nconst passwordReducer = (state, action) => {\n\n  if(action.type === 'USER_PASSWORD')\n  {\n    return { value: action.val, isValid: action.val.trim().length > 6 };\n  }\n\n  if(action.type === 'INPUT_BLUR')\n  {\n    return {value: state.value, isValid: state.value.trim().length > 6}; \n  }\n\n  return {value: '', isValid: false};\n\n};\n\n\nconst SignUp = () => {\n  const [formIsValid, setFormIsValid] = useState(false);\n\n  /* email reducer */\n  const [emailState, dispatchEmail] = useReducer(\n    emailReducer, \n    {\n      value: '',\n      isValid: null \n    }\n  );\n\n  /* password reducer */\n  const [passwordState, dispatchPassword] = useReducer(\n    passwordReducer,\n    {\n      value: '',\n      isValid: null\n    }\n  );\n\n\n  useEffect(() => {\n    console.log(\"EFFECT RUNNING\");\n\n    return () => {\n      console.log(\"EFFECT RUNNING\");\n    }\n  }, []);\n\n  /*  useEffect will only run if either\n      enteredEmail, or enteredPassword changed    \n  */\n\n  const { isValid: emailIsValid } = emailState;\n  const { isValid: passwordIsValid } = passwordState;\n\n  const context = useContext(AuthContext);\n\n  const emailInputRef = useRef();\n  const passwordInputRef = useRef();\n\n  useEffect(() => {\n\n    /* Every 2 seconds, check for valid email and password */\n    const identifier = setTimeout(() => {\n      console.log(\"Checking for validation\");\n\n      setFormIsValid(\n        emailIsValid && passwordIsValid\n      );\n    }, 2000);    \n\n    /* clear current timer, before starting a new one */\n    return () => {\n      console.log(\"CLEAN UP\");\n      clearTimeout(identifier);\n    };\n  }, [emailIsValid, passwordIsValid]);\n\n  /* function to handle when the user types in their email */\n  const emailChangeHandler = (event) => {\n    /* notify the email Reducer */\n    dispatchEmail({ // pass the type and the email value\n      type: 'USER_INPUT', \n      val: event.target.value\n    });\n  };\n\n  /* function to handle when the user types in their password */\n  const passwordChangeHandler = (event) => {\n    /* notify the password Reducer */ \n    dispatchPassword({ // pass the type and the password value\n      type: 'USER_PASSWORD',\n      val: event.target.value\n    });\n  };\n\n  /* function to validate user email */\n  const validateEmailHandler = () => {\n    dispatchEmail({\n      type: 'INPUT_BLUR'\n    });\n  };\n\n  /* function to validate user password */\n  const validatePasswordHandler = () => {\n    dispatchPassword({\n      type: 'INPUT_BLUR'\n    });\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault(); // prevent default HTTP request\n\n    /* if username and password valid */\n    if(formIsValid){\n\n        /* create user object to send to database */\n        const user = {\n            email: emailState.value,\n            password: passwordState.value\n        };\n\n        addUserToDatabase(user);\n    }\n    else if(!emailIsValid )\n    {\n      emailInputRef.current.focus();\n    }\n    else\n    {\n      passwordInputRef.current.focus();\n    }\n  };\n\n  /* function to send username/password to database */\n  async function addUserToDatabase(user){\n\n    /* send HTTPS POST request */\n    const response = await fetch('https://expense-tracker-c57db-default-rtdb.firebaseio.com/users.json', {\n      method: 'POST',\n      body: JSON.stringify(user),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await response.json();\n    console.log(data);\n  }\n\n  return (\n      <Card className={classes.login}>\n        <form onSubmit={submitHandler}>\n\n          <Input\n            ref={emailInputRef}\n            isValid={emailIsValid}\n            id=\"email\"\n            label=\"E-Mail\"\n            type=\"email\"\n            value={emailState.value}\n            onChange={emailChangeHandler}\n            onBlur={validateEmailHandler}\n          />\n\n          <Input\n            ref={passwordInputRef}\n            isValid={passwordIsValid}\n            id=\"password\"\n            label=\"Password\"\n            type=\"password\"\n            value={passwordState.value}\n            onChange={passwordChangeHandler}\n            onBlur={validatePasswordHandler}\n          />\n\n          <div className={classes.actions}>\n            <Button type=\"submit\" className={classes.btn}> \n                Sign Up\n            </Button>\n          </div>\n        </form>\n      </Card>\n  );\n};\nexport default SignUp;"]},"metadata":{},"sourceType":"module"}