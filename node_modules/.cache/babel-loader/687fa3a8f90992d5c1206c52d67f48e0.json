{"ast":null,"code":"var _jsxFileName = \"/Users/alexwilson/Documents/CSCI426/Expense_Tracker_Project/Expense-Tracker/src/components/Login/SignUp.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useReducer, useContext, useRef, Fragment, useCallback } from 'react';\nimport Card from '../UI/Card/Card';\nimport Input from '../UI/Input/Input';\nimport classes from './Login.module.css';\nimport Button from '../UI/Button/Button';\nimport AuthContext from '../../store/auth-context';\nimport ErrorCard from '../UI/Card/ErrorCard';\n/* email Reducer */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst emailReducer = (state, action) => {\n  /* when the user is typing in their email */\n  if (action.type === 'USER_INPUT') {\n    /* return if it a valid email  */\n    return {\n      value: action.val,\n      isValid: action.val.includes('@')\n    };\n  }\n\n  if (action.type === 'INPUT_BLUR') {\n    return {\n      value: state.value,\n      isValid: state.value.includes('@')\n    };\n  }\n\n  return {\n    value: '',\n    isValid: false\n  };\n};\n/* password Reducer */\n\n\nconst passwordReducer = (state, action) => {\n  if (action.type === 'USER_PASSWORD') {\n    return {\n      value: action.val,\n      isValid: action.val.trim().length > 6\n    };\n  }\n\n  if (action.type === 'INPUT_BLUR') {\n    return {\n      value: state.value,\n      isValid: state.value.trim().length > 6\n    };\n  }\n\n  return {\n    value: '',\n    isValid: false\n  };\n};\n\nconst SignUp = () => {\n  _s();\n\n  const [formIsValid, setFormIsValid] = useState(false);\n  const [errorOn, setErrorOn] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(null);\n  /* email reducer */\n\n  const [emailState, dispatchEmail] = useReducer(emailReducer, {\n    value: '',\n    isValid: null\n  });\n  /* password reducer */\n\n  const [passwordState, dispatchPassword] = useReducer(passwordReducer, {\n    value: '',\n    isValid: null\n  });\n  /*  useEffect will only run if either\n      enteredEmail, or enteredPassword changed    \n  */\n\n  const {\n    isValid: emailIsValid\n  } = emailState;\n  const {\n    isValid: passwordIsValid\n  } = passwordState; //const context = useContext(AuthContext);\n\n  const emailInputRef = useRef();\n  const passwordInputRef = useRef();\n  useEffect(() => {\n    /* Every 2 seconds, check for valid email and password */\n    const identifier = setTimeout(() => {\n      console.log(\"Checking for validation\");\n      setFormIsValid(emailIsValid && passwordIsValid);\n    }, 2000);\n    /* clear current timer, before starting a new one */\n\n    return () => {\n      console.log(\"CLEAN UP\");\n      clearTimeout(identifier);\n    };\n  }, [emailIsValid, passwordIsValid]);\n  /* function to handle when the user types in their email */\n\n  const emailChangeHandler = event => {\n    /* notify the email Reducer */\n    dispatchEmail({\n      // pass the type and the email value\n      type: 'USER_INPUT',\n      val: event.target.value\n    });\n  };\n  /* function to handle when the user types in their password */\n\n\n  const passwordChangeHandler = event => {\n    /* notify the password Reducer */\n    dispatchPassword({\n      // pass the type and the password value\n      type: 'USER_PASSWORD',\n      val: event.target.value\n    });\n  };\n  /* function to validate user email */\n\n\n  const validateEmailHandler = () => {\n    dispatchEmail({\n      type: 'INPUT_BLUR'\n    });\n  };\n  /* function to validate user password */\n\n\n  const validatePasswordHandler = () => {\n    dispatchPassword({\n      type: 'INPUT_BLUR'\n    });\n  };\n\n  const submitHandler = useCallback(async event => {\n    event.preventDefault(); // prevent default HTTP request\n\n    setErrorOn(true); // no errors prior to call to database\n\n    setErrorMessage(null);\n    /* if username and password valid */\n\n    if (formIsValid) {\n      /* create user object to send to database */\n      const user = {\n        email: emailState.value,\n        password: passwordState.value\n      };\n\n      try {\n        /* send HTTPS POST request */\n        const response = await fetch('https://expense-tracker-c57db-default-rtdb.firebaseio.com/users.jsonn', {\n          method: 'POST',\n          body: JSON.stringify(user),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        const data = await response.json();\n        console.log(data);\n      } catch (error) {\n        setErrorMessage(error.message); // set the error message\n\n        console.log(\"errorOn BEFORE = \" + errorOn);\n        setErrorOn(true);\n        console.log(\"errorOn = \" + errorOn);\n        console.log(error.message);\n      }\n\n      console.log(\"errorOn = \" + errorOn);\n    } else if (!emailIsValid) {\n      emailInputRef.current.focus();\n    } else {\n      passwordInputRef.current.focus();\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [!errorOn && /*#__PURE__*/_jsxDEV(Card, {\n      className: classes.login,\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: submitHandler,\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          ref: emailInputRef,\n          isValid: emailIsValid,\n          id: \"email\",\n          label: \"E-Mail\",\n          type: \"email\",\n          value: emailState.value,\n          onChange: emailChangeHandler,\n          onBlur: validateEmailHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          ref: passwordInputRef,\n          isValid: passwordIsValid,\n          id: \"password\",\n          label: \"Password\",\n          type: \"password\",\n          value: passwordState.value,\n          onChange: passwordChangeHandler,\n          onBlur: validatePasswordHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.actions,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            className: classes.btn,\n            children: \"Sign Up\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 26\n    }, this), errorOn && /*#__PURE__*/_jsxDEV(ErrorCard, {\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SignUp, \"QtkpntjWZrM7g3hhdzmvEiisYDU=\");\n\n_c = SignUp;\nexport default SignUp;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignUp\");","map":{"version":3,"sources":["/Users/alexwilson/Documents/CSCI426/Expense_Tracker_Project/Expense-Tracker/src/components/Login/SignUp.js"],"names":["React","useState","useEffect","useReducer","useContext","useRef","Fragment","useCallback","Card","Input","classes","Button","AuthContext","ErrorCard","emailReducer","state","action","type","value","val","isValid","includes","passwordReducer","trim","length","SignUp","formIsValid","setFormIsValid","errorOn","setErrorOn","errorMessage","setErrorMessage","emailState","dispatchEmail","passwordState","dispatchPassword","emailIsValid","passwordIsValid","emailInputRef","passwordInputRef","identifier","setTimeout","console","log","clearTimeout","emailChangeHandler","event","target","passwordChangeHandler","validateEmailHandler","validatePasswordHandler","submitHandler","preventDefault","user","email","password","response","fetch","method","body","JSON","stringify","headers","data","json","error","message","current","focus","login","actions","btn"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useReducer, useContext, useRef, Fragment, useCallback } from 'react';\n\nimport Card from '../UI/Card/Card';\nimport Input from '../UI/Input/Input';\nimport classes from './Login.module.css';\nimport Button from '../UI/Button/Button';\nimport AuthContext from '../../store/auth-context';\nimport ErrorCard from '../UI/Card/ErrorCard';\n\n/* email Reducer */\nconst emailReducer = (state, action) => {\n\n    /* when the user is typing in their email */\n    if (action.type === 'USER_INPUT') {\n        /* return if it a valid email  */\n        return { value: action.val, isValid: action.val.includes('@') };\n    }\n\n    if (action.type === 'INPUT_BLUR') {\n        return { value: state.value, isValid: state.value.includes('@') };\n    }\n\n    return { value: '', isValid: false };\n};\n\n/* password Reducer */\nconst passwordReducer = (state, action) => {\n\n    if (action.type === 'USER_PASSWORD') {\n        return { value: action.val, isValid: action.val.trim().length > 6 };\n    }\n\n    if (action.type === 'INPUT_BLUR') {\n        return { value: state.value, isValid: state.value.trim().length > 6 };\n    }\n\n    return { value: '', isValid: false };\n\n};\n\n\nconst SignUp = () => {\n    const [formIsValid, setFormIsValid] = useState(false);\n    const [errorOn, setErrorOn] = useState(false);\n    const [errorMessage, setErrorMessage] = useState(null);\n\n    /* email reducer */\n    const [emailState, dispatchEmail] = useReducer(\n        emailReducer,\n        {\n            value: '',\n            isValid: null\n        }\n    );\n\n    /* password reducer */\n    const [passwordState, dispatchPassword] = useReducer(\n        passwordReducer,\n        {\n            value: '',\n            isValid: null\n        }\n    );\n\n    /*  useEffect will only run if either\n        enteredEmail, or enteredPassword changed    \n    */\n\n    const { isValid: emailIsValid } = emailState;\n    const { isValid: passwordIsValid } = passwordState;\n\n    //const context = useContext(AuthContext);\n\n    const emailInputRef = useRef();\n    const passwordInputRef = useRef();\n\n    useEffect(() => {\n\n        /* Every 2 seconds, check for valid email and password */\n        const identifier = setTimeout(() => {\n            console.log(\"Checking for validation\");\n\n            setFormIsValid(\n                emailIsValid && passwordIsValid\n            );\n        }, 2000);\n\n        /* clear current timer, before starting a new one */\n        return () => {\n            console.log(\"CLEAN UP\");\n            clearTimeout(identifier);\n        };\n    }, [emailIsValid, passwordIsValid]);\n\n    /* function to handle when the user types in their email */\n    const emailChangeHandler = (event) => {\n        /* notify the email Reducer */\n        dispatchEmail({ // pass the type and the email value\n            type: 'USER_INPUT',\n            val: event.target.value\n        });\n    };\n\n    /* function to handle when the user types in their password */\n    const passwordChangeHandler = (event) => {\n        /* notify the password Reducer */\n        dispatchPassword({ // pass the type and the password value\n            type: 'USER_PASSWORD',\n            val: event.target.value\n        });\n    };\n\n    /* function to validate user email */\n    const validateEmailHandler = () => {\n        dispatchEmail({\n            type: 'INPUT_BLUR'\n        });\n    };\n\n    /* function to validate user password */\n    const validatePasswordHandler = () => {\n        dispatchPassword({\n            type: 'INPUT_BLUR'\n        });\n    };\n\n    const submitHandler = useCallback(async (event) => {\n        event.preventDefault(); // prevent default HTTP request\n        setErrorOn(true); // no errors prior to call to database\n        setErrorMessage(null)\n\n        /* if username and password valid */\n        if (formIsValid) {\n\n            /* create user object to send to database */\n            const user = {\n                email: emailState.value,\n                password: passwordState.value\n            };\n\n            try {\n                /* send HTTPS POST request */\n                const response = await fetch('https://expense-tracker-c57db-default-rtdb.firebaseio.com/users.jsonn', {\n                    method: 'POST',\n                    body: JSON.stringify(user),\n                    headers: {\n                        'Content-Type': 'application/json'\n                    }\n                });\n                const data = await response.json();\n                console.log(data);\n            }\n            catch (error) {\n                setErrorMessage(error.message); // set the error message\n                console.log(\"errorOn BEFORE = \" + errorOn);\n                setErrorOn(true);\n                console.log(\"errorOn = \" + errorOn);\n                console.log(error.message);\n            }\n\n            console.log(\"errorOn = \" + errorOn);\n        }\n        else if (!emailIsValid) {\n            emailInputRef.current.focus();\n        }\n        else {\n            passwordInputRef.current.focus();\n        }\n    });\n\n    return (\n        <Fragment>\n            {!errorOn && <Card className={classes.login}>\n                <form onSubmit={submitHandler}>\n                    <Input\n                        ref={emailInputRef}\n                        isValid={emailIsValid}\n                        id=\"email\"\n                        label=\"E-Mail\"\n                        type=\"email\"\n                        value={emailState.value}\n                        onChange={emailChangeHandler}\n                        onBlur={validateEmailHandler}\n                    />\n\n                    <Input\n                        ref={passwordInputRef}\n                        isValid={passwordIsValid}\n                        id=\"password\"\n                        label=\"Password\"\n                        type=\"password\"\n                        value={passwordState.value}\n                        onChange={passwordChangeHandler}\n                        onBlur={validatePasswordHandler}\n                    />\n\n                    <div className={classes.actions}>\n                        <Button type=\"submit\" className={classes.btn}>\n                            Sign Up\n                        </Button>\n                    </div>\n                </form>\n            </Card>}\n            {errorOn && <ErrorCard>{errorMessage}</ErrorCard>}\n        </Fragment>\n    );\n};\nexport default SignUp;"]},"metadata":{},"sourceType":"module"}