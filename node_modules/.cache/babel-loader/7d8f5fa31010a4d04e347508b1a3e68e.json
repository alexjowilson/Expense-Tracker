{"ast":null,"code":"var _jsxFileName = \"/Users/alexwilson/Documents/CSCI426/Expense_Tracker_Project/Expense-Tracker/src/components/Login/SignUp.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useReducer, useContext, useRef, Fragment } from 'react';\nimport Card from '../UI/Card/Card';\nimport Input from '../UI/Input/Input';\nimport classes from './Login.module.css';\nimport Button from '../UI/Button/Button';\nimport AuthContext from '../../store/auth-context';\n/* email Reducer */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst emailReducer = (state, action) => {\n  /* when the user is typing in their email */\n  if (action.type === 'USER_INPUT') {\n    /* return if it a valid email  */\n    return {\n      value: action.val,\n      isValid: action.val.includes('@')\n    };\n  }\n\n  if (action.type === 'INPUT_BLUR') {\n    return {\n      value: state.value,\n      isValid: state.value.includes('@')\n    };\n  }\n\n  return {\n    value: '',\n    isValid: false\n  };\n};\n/* password Reducer */\n\n\nconst passwordReducer = (state, action) => {\n  if (action.type === 'USER_PASSWORD') {\n    return {\n      value: action.val,\n      isValid: action.val.trim().length > 6\n    };\n  }\n\n  if (action.type === 'INPUT_BLUR') {\n    return {\n      value: state.value,\n      isValid: state.value.trim().length > 6\n    };\n  }\n\n  return {\n    value: '',\n    isValid: false\n  };\n};\n\nconst SignUp = () => {\n  _s();\n\n  const [formIsValid, setFormIsValid] = useState(false);\n  const [error, setError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(null);\n  /* email reducer */\n\n  const [emailState, dispatchEmail] = useReducer(emailReducer, {\n    value: '',\n    isValid: null\n  });\n  /* password reducer */\n\n  const [passwordState, dispatchPassword] = useReducer(passwordReducer, {\n    value: '',\n    isValid: null\n  });\n  useEffect(() => {\n    console.log(\"EFFECT RUNNING\");\n    return () => {\n      console.log(\"EFFECT RUNNING\");\n    };\n  }, []);\n  /*  useEffect will only run if either\n      enteredEmail, or enteredPassword changed    \n  */\n\n  const {\n    isValid: emailIsValid\n  } = emailState;\n  const {\n    isValid: passwordIsValid\n  } = passwordState;\n  const context = useContext(AuthContext);\n  const emailInputRef = useRef();\n  const passwordInputRef = useRef();\n  useEffect(() => {\n    /* Every 2 seconds, check for valid email and password */\n    const identifier = setTimeout(() => {\n      console.log(\"Checking for validation\");\n      setFormIsValid(emailIsValid && passwordIsValid);\n    }, 2000);\n    /* clear current timer, before starting a new one */\n\n    return () => {\n      console.log(\"CLEAN UP\");\n      clearTimeout(identifier);\n    };\n  }, [emailIsValid, passwordIsValid]);\n  /* function to handle when the user types in their email */\n\n  const emailChangeHandler = event => {\n    /* notify the email Reducer */\n    dispatchEmail({\n      // pass the type and the email value\n      type: 'USER_INPUT',\n      val: event.target.value\n    });\n  };\n  /* function to handle when the user types in their password */\n\n\n  const passwordChangeHandler = event => {\n    /* notify the password Reducer */\n    dispatchPassword({\n      // pass the type and the password value\n      type: 'USER_PASSWORD',\n      val: event.target.value\n    });\n  };\n  /* function to validate user email */\n\n\n  const validateEmailHandler = () => {\n    dispatchEmail({\n      type: 'INPUT_BLUR'\n    });\n  };\n  /* function to validate user password */\n\n\n  const validatePasswordHandler = () => {\n    dispatchPassword({\n      type: 'INPUT_BLUR'\n    });\n  };\n\n  const submitHandler = event => {\n    event.preventDefault(); // prevent default HTTP request\n\n    /* if username and password valid */\n\n    if (formIsValid) {\n      /* create user object to send to database */\n      const user = {\n        email: emailState.value,\n        password: passwordState.value\n      };\n      addUserToDatabase(user);\n    } else if (!emailIsValid) {\n      emailInputRef.current.focus();\n    } else {\n      passwordInputRef.current.focus();\n    }\n  };\n  /* function to send username/password to database */\n\n\n  async function addUserToDatabase(user) {\n    setError(false); // no errors prior to call to database\n\n    setErrorMessage(null);\n\n    try {\n      /* send HTTPS POST request */\n      const response = await fetch('https://expense-tracker-c57db-default-rtdb.firebaseio.com/users.jsonn', {\n        method: 'POST',\n        body: JSON.stringify(user),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const data = await response.json();\n      console.log(data);\n    } catch (error) {\n      setErrorMessage(error.message); // set the error message\n\n      console.log(error.message);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [!error && /*#__PURE__*/_jsxDEV(Card, {\n      className: classes.login,\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: submitHandler,\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          ref: emailInputRef,\n          isValid: emailIsValid,\n          id: \"email\",\n          label: \"E-Mail\",\n          type: \"email\",\n          value: emailState.value,\n          onChange: emailChangeHandler,\n          onBlur: validateEmailHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          ref: passwordInputRef,\n          isValid: passwordIsValid,\n          id: \"password\",\n          label: \"Password\",\n          type: \"password\",\n          value: passwordState.value,\n          onChange: passwordChangeHandler,\n          onBlur: validatePasswordHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.actions,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            className: classes.btn,\n            children: \"Sign Up\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 18\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SignUp, \"PhKbr6bJLG3GiU5XS/ScgXJ1GCA=\");\n\n_c = SignUp;\nexport default SignUp;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignUp\");","map":{"version":3,"sources":["/Users/alexwilson/Documents/CSCI426/Expense_Tracker_Project/Expense-Tracker/src/components/Login/SignUp.js"],"names":["React","useState","useEffect","useReducer","useContext","useRef","Fragment","Card","Input","classes","Button","AuthContext","emailReducer","state","action","type","value","val","isValid","includes","passwordReducer","trim","length","SignUp","formIsValid","setFormIsValid","error","setError","errorMessage","setErrorMessage","emailState","dispatchEmail","passwordState","dispatchPassword","console","log","emailIsValid","passwordIsValid","context","emailInputRef","passwordInputRef","identifier","setTimeout","clearTimeout","emailChangeHandler","event","target","passwordChangeHandler","validateEmailHandler","validatePasswordHandler","submitHandler","preventDefault","user","email","password","addUserToDatabase","current","focus","response","fetch","method","body","JSON","stringify","headers","data","json","message","login","actions","btn"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useReducer, useContext, useRef, Fragment } from 'react';\n\nimport Card from '../UI/Card/Card';\nimport Input from '../UI/Input/Input';\nimport classes from './Login.module.css';\nimport Button from '../UI/Button/Button';\nimport AuthContext from '../../store/auth-context';\n\n/* email Reducer */\nconst emailReducer = (state, action) => {\n\n  /* when the user is typing in their email */\n  if(action.type === 'USER_INPUT')\n  {\n    /* return if it a valid email  */\n    return { value: action.val, isValid: action.val.includes('@')}; \n  }\n\n  if(action.type === 'INPUT_BLUR')\n  {\n    return {value: state.value, isValid: state.value.includes('@')};\n  }\n\n  return {value: '', isValid: false};\n};\n\n/* password Reducer */\nconst passwordReducer = (state, action) => {\n\n  if(action.type === 'USER_PASSWORD')\n  {\n    return { value: action.val, isValid: action.val.trim().length > 6 };\n  }\n\n  if(action.type === 'INPUT_BLUR')\n  {\n    return {value: state.value, isValid: state.value.trim().length > 6}; \n  }\n\n  return {value: '', isValid: false};\n\n};\n\n\nconst SignUp = () => {\n    const [formIsValid, setFormIsValid] = useState(false);\n    const[error, setError] = useState(false);\n    const[errorMessage, setErrorMessage] = useState(null);\n\n\n  /* email reducer */\n  const [emailState, dispatchEmail] = useReducer(\n    emailReducer, \n    {\n      value: '',\n      isValid: null \n    }\n  );\n\n  /* password reducer */\n  const [passwordState, dispatchPassword] = useReducer(\n    passwordReducer,\n    {\n      value: '',\n      isValid: null\n    }\n  );\n\n\n  useEffect(() => {\n    console.log(\"EFFECT RUNNING\");\n\n    return () => {\n      console.log(\"EFFECT RUNNING\");\n    }\n  }, []);\n\n  /*  useEffect will only run if either\n      enteredEmail, or enteredPassword changed    \n  */\n\n  const { isValid: emailIsValid } = emailState;\n  const { isValid: passwordIsValid } = passwordState;\n\n  const context = useContext(AuthContext);\n\n  const emailInputRef = useRef();\n  const passwordInputRef = useRef();\n\n  useEffect(() => {\n\n    /* Every 2 seconds, check for valid email and password */\n    const identifier = setTimeout(() => {\n      console.log(\"Checking for validation\");\n\n      setFormIsValid(\n        emailIsValid && passwordIsValid\n      );\n    }, 2000);    \n\n    /* clear current timer, before starting a new one */\n    return () => {\n      console.log(\"CLEAN UP\");\n      clearTimeout(identifier);\n    };\n  }, [emailIsValid, passwordIsValid]);\n\n  /* function to handle when the user types in their email */\n  const emailChangeHandler = (event) => {\n    /* notify the email Reducer */\n    dispatchEmail({ // pass the type and the email value\n      type: 'USER_INPUT', \n      val: event.target.value\n    });\n  };\n\n  /* function to handle when the user types in their password */\n  const passwordChangeHandler = (event) => {\n    /* notify the password Reducer */ \n    dispatchPassword({ // pass the type and the password value\n      type: 'USER_PASSWORD',\n      val: event.target.value\n    });\n  };\n\n  /* function to validate user email */\n  const validateEmailHandler = () => {\n    dispatchEmail({\n      type: 'INPUT_BLUR'\n    });\n  };\n\n  /* function to validate user password */\n  const validatePasswordHandler = () => {\n    dispatchPassword({\n      type: 'INPUT_BLUR'\n    });\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault(); // prevent default HTTP request\n\n    /* if username and password valid */\n    if(formIsValid){\n\n        /* create user object to send to database */\n        const user = {\n            email: emailState.value,\n            password: passwordState.value\n        };\n\n        addUserToDatabase(user);\n    }\n    else if(!emailIsValid )\n    {\n      emailInputRef.current.focus();\n    }\n    else\n    {\n      passwordInputRef.current.focus();\n    }\n  };\n\n  /* function to send username/password to database */\n  async function addUserToDatabase(user){\n\n    setError(false); // no errors prior to call to database\n    setErrorMessage(null)\n\n    try{\n        /* send HTTPS POST request */\n        const response = await fetch('https://expense-tracker-c57db-default-rtdb.firebaseio.com/users.jsonn', {\n        method: 'POST',\n        body: JSON.stringify(user),\n        headers: {\n            'Content-Type': 'application/json'\n        }\n        });\n        const data = await response.json();\n        console.log(data);\n    }\n    catch(error)\n    {\n        setErrorMessage(error.message); // set the error message\n        console.log(error.message);\n    }\n  }\n\n  return (\n    <Fragment>\n      {!error && <Card className={classes.login}>\n        <form onSubmit={submitHandler}>\n\n          <Input\n            ref={emailInputRef}\n            isValid={emailIsValid}\n            id=\"email\"\n            label=\"E-Mail\"\n            type=\"email\"\n            value={emailState.value}\n            onChange={emailChangeHandler}\n            onBlur={validateEmailHandler}\n          />\n\n          <Input\n            ref={passwordInputRef}\n            isValid={passwordIsValid}\n            id=\"password\"\n            label=\"Password\"\n            type=\"password\"\n            value={passwordState.value}\n            onChange={passwordChangeHandler}\n            onBlur={validatePasswordHandler}\n          />\n\n          <div className={classes.actions}>\n            <Button type=\"submit\" className={classes.btn}> \n                Sign Up\n            </Button>\n          </div>\n        </form>\n      </Card>}\n      {error && <p>{error}</p>}\n    </Fragment>\n  );\n};\nexport default SignUp;"]},"metadata":{},"sourceType":"module"}